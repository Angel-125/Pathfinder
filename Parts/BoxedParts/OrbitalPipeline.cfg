PART
{
	name = wbiOrbitalPipeline
	module = Part
	author = Angel-125

	MODEL
	{
		model = WildBlueIndustries/Pathfinder/Parts/BoxedParts/OrbitalPipeline
	}
	rescaleFactor = 1

	node_attach = 0, 0, 0, 0, -1, 0, 2
	node_stack_bottom = 0, 0, 0, 0, -1, 0, 2
	node_stack_top = 0, 7.045, 0, 0, 1, 0, 2

	TechRequired = composites
	entryCost = 43800
	cost = 18000
	category = Utility
	subcategory = 0
	title = Orbital Pipeline
	manufacturer = Wild Blue Industries
	description = Like its ground-based counterpart, the Pipeline Orbital Mass Driver can shoot Rocket-assisted Object Containers (ROCs) vast distances- but only to other orbiting mass drivers. It can also receive ROCs from other mass drivers. Launching a ROC costs guidance data to calculate the trajectory, ElectricCharge to launch the projectile, and LiquidFuel and Oxidizer for course corrections. The destinations are limited by changes to orbital altitude and orbital inclination- best results can be obtained by small differences in both altitude and inclination.

	// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
	attachRules = 1,1,1,1,1

	// --- standard part parameters ---
	mass = 10
	dragModelType = default
	maximum_drag = 0.2
	minimum_drag = 0.2
	angularDrag = 2
	crashTolerance = 7
	maxTemp = 3900
	breakingForce = 50
	breakingTorque = 50
	bulkheadProfiles = size1, srf

	MODULE:NEEDS[KIS]
	{
		name = ModuleKISInventory
		maxVolume = 2000
		externalAccess = true
		internalAccess = true
		slotsX = 5
		slotsY = 5
		slotSize = 50
		itemIconResolution = 128
		selfIconResolution = 128
		openSndPath = KIS/Sounds/containerOpen
		closeSndPath = KIS/Sounds/containerClose
		defaultMoveSndPath = KIS/Sounds/itemMove
	}

	MODULE
	{
		name = WBIPipeEndpoint

		//Can the pipeline send payloads from orbit to ground? Normally this isn't allowed.
		allowOrbitToGround = true

		//Amount of ec/sec required to maintain activation state.
		activationCostEC = 150

		//Maximum amount of kinetic energy that the mass driver can generate
		maxKineticEnergy = 986326250

		//Multiplied by payload mass to get the fuel mass required for course corrections.
		//The required amount of LiquidFuel and Oxidizer is derived from the total fuel mass.
		fuelMassFraction = 0.334

		//The dry mass fraction of the delivery vehicle.
		//Dry mass = (payload mass + fuel mass) * dryMassFraction
		dryMassFraction = 0.05

        	//How much guidance data does it cost per kilometer of distance to the destination.
	        //Example: A destination that is 500km away requires 500 * 0.02 = 10 units of guidance data.
		dataCostPerKm = 0.02

        	//Multiplier to the data cost for ground-to-orbit shots.
	        //Example: A station orbiting at an altitude of 100km requires 100 * .02 * 5 = 10 units of trajectory data.
		orbitalCostMultiplier = 5

        	//How much electric charge to cost per metric ton of the delivery vehicle.
		//Includes the cost of fuel for rocket assist and structural mass.
        	//Example: A vehicle with a 10-tonne capacity and 10 tonnes of fuel masses 21 tonnes. EC cost: 21 * 1000 = 21000.
		electricityCostPerTonne = 1000.0

		//How much trajectory data to generate per second while the endpoint is active.
		//Requires canSendPayloads = true.
		dataGenerationRate = 0.00084

		//Max amount of guidance data that the computer can hold.
		maxGuidanceData = 1000
	}

	MODULE:NEEDS[BARIS]
	{
		name = ModuleQualityControl
		quality = 50
		mtbf = 2556
		showGui = false
	}

}