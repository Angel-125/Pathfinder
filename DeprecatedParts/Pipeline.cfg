PART
{
	name = wbiPipeline
	module = Part
	author = Angel-125

	MODEL
	{
		model = WildBlueIndustries/Pathfinder/Parts/BoxedParts/Pipeline
	}
	rescaleFactor = 1

	node_attach = 0, 0, 0, 0, -1, 0, 1
	node_stack_bottom = 0, 0, 0, 0, -1, 0, 1
	node_stack_top = 0, 0.8288187, 0, 0, 1, 0, 1

	NODE
	{
		name = kisNode1
		transform = kisNode1
	}

	NODE
	{
		name = Node1
		transform = Node1
	}

	TechRequired = nanolathing
	TechHidden = True
	entryCost = 43800
	cost = 18000
	category = Utility
	subcategory = 0
	title = Pipeline Mass Driver
	manufacturer = Wild Blue Industries
	description = Pipeline is a combined mass driver and mass catcher. It can launch Rocket-assisted Object Containers (ROCs) hundreds of kilometers away to another Pipeline Mass Driver or to an Orbital Pipeline. The maximum payload capacity varies based factors like range to the target and the pull of gravity. Launching a ROC costs guidance data to calculate the trajectory, ElectricCharge to launch the projectile, and LiquidFuel and Oxidizer for course corrections.

	// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
	attachRules = 1,1,1,1,1

	// --- standard part parameters ---
	mass = 0.1
	dragModelType = default
	maximum_drag = 0.2
	minimum_drag = 0.2
	angularDrag = 2
	crashTolerance = 7
	maxTemp = 3900
	breakingForce = 50
	breakingTorque = 50
	bulkheadProfiles = size1, srf

	MODULE:NEEDS[KIS]
	{
		name = ModuleKISItemEvaTweaker
		volumeOverride = 1100
		editorItemsCategory = false
		carriable = true
		equipMode = part
		equipSlot = jetpack
		equipBoneName = aliasJetpack
		equipPos = 0,-0.2,-0.45
		equipDir = 0,0,0
		runSpeed = 0.8
		allowPartAttach = 1
	}

	MODULE:NEEDS[KIS]
	{
		name = ModuleKISInventory
		maxVolume = 8000
		externalAccess = true
		internalAccess = true
		slotsX = 5
		slotsY = 5
		slotSize = 50
		itemIconResolution = 128
		selfIconResolution = 128
		openSndPath = KIS/Sounds/containerOpen
		closeSndPath = KIS/Sounds/containerClose
		defaultMoveSndPath = KIS/Sounds/itemMove
	}

	MODULE
	{
		name = WBIPipeEndpoint

		//Can the pipeline send payloads from orbit to ground? Normally this isn't allowed.
		allowOrbitToGround = false

		//Amount of ec/sec required to maintain activation state.
		activationCostEC = 400

		//Maximum amount of kinetic energy that the mass driver can generate
		//K.E. = (0.5 * projectile mass) * (velocity^2)
		//Calibrated for a 14 metric ton projectile accelerated to 650 m/sec (~Mun orbital velocity)
		//Factor in fuel and container mass, and you can put 10 metric tonnes into munar orbit.
		maxKineticEnergy = 2958978750

		//Multiplied by payload mass to get the fuel mass required for course corrections.
		//The required amount of LiquidFuel and Oxidizer is derived from the total fuel mass.
		fuelMassFraction = 0.334

		//The dry mass fraction of the delivery vehicle.
		//Dry mass = (payload mass + fuel mass) * dryMassFraction
		dryMassFraction = 0.05

        	//How much guidance data does it cost per kilometer of distance to the destination.
	        //Example: A destination that is 500km away requires 500 * 0.02 = 10 units of guidance data.
		dataCostPerKm = 0.02

        	//Multiplier to the data cost for ground-to-orbit shots.
	        //Example: A station orbiting at an altitude of 100km requires 100 * .02 * 5 = 10 units of trajectory data.
		orbitalCostMultiplier = 5

        	//How much electric charge to cost per metric ton of the delivery vehicle.
		//Includes the cost of fuel for rocket assist and structural mass.
        	//Example: A vehicle with a 10-tonne capacity and 10 tonnes of fuel masses 21 tonnes. EC cost: 21 * 1000 = 21000.
		electricityCostPerTonne = 1000.0

		//How much trajectory data to generate per second while the endpoint is active.
		//Requires canSendPayloads = true.
		dataGenerationRate = 0.00084

		//Max amount of guidance data that the computer can hold.
		maxGuidanceData = 1000
	}

	MODULE
	{
		name = WBIResourceDistributor
	}

	MODULE
	{
		name = WBIOmniStorage

		storageVolume = 72000

		//Adjust storage volume to account for resource switcher's capacity factor.
		accountForSwitcherCapacity = true

		//Skill required to reconfigure the container.
		reconfigureSkill = ConverterSkill

		//Minimum rank to reconfigure the container.
		reconfigureRank = 1

		//Resource required to reconfigure the container.
		requiredResource = Equipment

		//Amount of the required resource to reconfigure the container.
		requiredAmount = 0

		//Blacklisted resources that can't be added to the container.
		//Separate by semicolon. Below is the default.
		resourceBlacklist = GeoEnergy;ElectroPlasma;CoreHeat;Atmosphere;CompressedAtmosphere;LabTime;ExposureTime;ScopeTime;SolarReports;SimulatorTime;GravityWaves;IntakeAir;StaticCharge;EVA Propellant;Plants
	}

	MODULE
	{
		name = WBIPackingBox
		showGUI = true
		showOpsView = false

		packingBoxTransform = PackingBox

		//Determines whether or not the part is inflatable
		isInflatable = True
		isOneShot = true
		staticAttachOnDeploy = true

		//Name of inflatable animation
		animationName = Deploy

		//GUI name of deploy animation
		startEventGUIName = Assemble

		//GUI name of retract animation
		endEventGUIName = Disassemble (EDITOR ONLY)

		//Determines if the part can be reconfigured out in the field.
		fieldReconfigurable = false

		partToolTipTitle = Pipeline Mass Driver
		partToolTip = You can transfer KIS items between facilities and craft in addition to resources.

		opsViewTitle = Pipeline Operations

		//If the part has a KIS container, this is the base and max amount
		baseStorage = 0.001
		maxStorage = 8000

		//List of part modules that should be enabled/disabled depending upon whether or not the part is deployed.
		MANAGED_MODULES
		{
			moduleName = WBIPipeEndpoint
			moduleName = ModuleKISInventory
			moduleName = WBIOmniStorage
			moduleName = WBIResourceDistributor
		}

		//List of resources needed to unpack the part.
		INPUT_RESOURCE
		{
			ResourceName = Equipment
			Ratio = 20000
		}

		INPUT_RESOURCE
		{
			ResourceName = Konkrete
			Ratio = 2000
		}

		RESOURCE
		{
			name = ElectricCharge
			amount = 2000
			maxAmount = 2000
		}

	}

	MODULE:NEEDS[BARIS]
	{
		name = ModuleQualityControl
		quality = 50
		mtbf = 2556
		showGui = false
	}

}

@PART[KIS_ContainerMount1]:NEEDS[KIS]
{
	@MODULE[ModuleKISPartMount]
	{
		@MOUNT
		{
			allowedPartName = wbiPipeline
		}
	}
}