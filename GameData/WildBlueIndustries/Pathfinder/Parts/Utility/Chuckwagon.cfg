PART
{
// this is a sample config file, for determining a good file format for defining part parameters
// comment line - ignored by cfg parser
// empty lines, or lines without a '=' sign are also ignored
// all other lines are split at the '=' sign, and the left operand is used to know what parameter we are setting
// diferent parameters require data in different formats (see docs), and each module has it's own parameters (again, see docs)
// each assignment must be in a single line. Lines without assignments will be ignored. (You CAN turn on word wrap, though)
// each keyword here relates to an existing variable in the assigned module. If the keyword isn't found, it is ignored.
// conversely, if a keyword is left unassigned (as in not in the file), it will be initialized with it's default value
// This is done automatically, so any public variable defined in the loaded module can be accessed this way (provided it's value can be parsed)


	// --- general parameters ---
	name = WBI_Chuckwagon
	module = Part
	author = Michael Billard (Angel-125)

	// --- asset parameters ---
	rescaleFactor = 1

	MODEL
	{
		model = WildBlueIndustries/Pathfinder/Assets/Chuckwagon
	}


	// --- node definitions ---
	// definition format is Position X, Position Y, Position Z, Up X, Up Y, Up Z
	node_attach = 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 2
	node_stack_mount = 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 2
	node_stack_back = 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2
	node_stack_front = 0, 0.0, -5.064, 0, 0, -1, 2
	node_stack_left = -1.782, 0.0, -3.282, -1, 0, 0, 2
	node_stack_right = 1.782, 0.0, -3.282, 1, 0, 0, 2

	// --- editor parameters ---
	TechRequired = specializedConstruction
	entryCost = 4000
	cost = 500
	category = Utility
	subcategory = 0
	title = Chuckwagon IMW
	manufacturer = Wild Blue Industries
	description = Need a lot of storage space? Then the Chuckwagon Inflatable Multipurpose Warehouse (IMW) is for you! The IMW gives your base ample room to store your stuff, and you can reconfigure the warehouse in the field by simply emptying the contents and choosing another storage configuration.

	// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
	attachRules = 1,1,0,1,1

	// --- standard part parameters ---
	mass = 0.25
	dragModelType = default
	maximum_drag = 0.25
	minimum_drag = 0.25
	angularDrag = .5
	crashTolerance = 45
	breakingForce = 2800
	breakingTorque = 2800
	maxTemp = 1000
	skinMaxTemp = 2000
	emissiveConstant = 0.5
	CrewCapacity = 1
	vesselType = Base
	fuelCrossFeed = True
	CoMOffset = 0, 0, -4

	INTERNAL
	{
		name = WBI_ChuckwagonSpace
	}


	MODULE
	{
		name = ModuleCommand
		minimumCrew = 0
	}

	MODULE
	{
		name = WBIMultipurposeStorage
		enableLogging = True

		//Determines whether or not the part is inflatable
		isInflatable = True

		//These colliders need to be switched between layer 26 (WheelCollidersIgnore) and 0 (default). When deflated, they're on
		//layer 26. When inflated, they're on layer 0. That way wheels ignore them when deflated, and you can transfer crew into the
		//module when inflated.
		inflatableColliders = Collider001;TunnelCollider001;TunnelCollider002;TunnelCollider003;Collider2

		//Crew capacity when inflated
		inflatedCrewCapacity = 1

		//Name of inflatable animation
		animationName = Deploy
		flightAnimationOnly = True

		//GUI name of deploy animation
		startEventGUIName = Inflate

		//GUI name of retract animation
		endEventGUIName = Deflate

		//Determines if the module allows in-field reconfiguring
		fieldReconfigurable = True

		//Require a confirmation click before changing resources
		confirmResourceSwitch = True

		//Determines whether or not to show the context menu GUI
		showGUI = True

		//Short name of the default module template.
		//This is used when selecting the part in the editor.
		//User will then right-click on the module to change its type.
		defaultTemplate = LFO

		//name of the template nodes to use
		templateNodes = GREENHOUSE;STORAGE_TEMPLATE

		//Some containers don't hold as much resources as the template specifies, while others hold more.
		//Since the resource templates specify base amounts, the capacity factor specifies a multiplier to
		//factor into the resource amounts.
		capacityFactor = 3

		//Name of the logo panel transforms
		logoPanelTransform = logoPanel001, logoPanel002, logoPanel003, logoPanel004, logoPanel005
		decalsVisible = true

		//If the part has a KIS container, this is the base and max amount
		baseStorage = 2000
		maxStorage = 31400

		partToolTipTitle = Your First Chuckwagon
		partToolTip = Pathfinders tend to travel light and keep moving, but the Chuckwagon provides ample room for all you packrats wanting to hole up. If you're going to stay awhile, why not science the kraken out of one and turn it into a greenhouse?
	}

	MODULE
	{
		name = WBIResourceDistributor
		resourceBlacklist = ReplacementParts
	}

	MODULE
	{
		name = WBILight
		animationName = ChuckwagonLights
		startEventGUIName = Lights On
		endEventGUIName = Lights Off
		ecRequired = 0.04
	}

	MODULE
	{
		name = ModuleKISInventory
		maxVolume = 2000
		externalAccess = true
		internalAccess = true
		slotsX = 10
		slotsY = 8
		slotSize = 50
		itemIconResolution = 128
		selfIconResolution = 128
		openSndPath = KIS/Sounds/containerOpen
		closeSndPath = KIS/Sounds/containerClose
		defaultMoveSndPath = KIS/Sounds/itemMove
	}

	MODULE
	{
		name = ModuleKISItemEvaTweaker
		editorItemsCategory = false
		carriable = true
		equipMode = part
		equipSlot = jetpack
		equipMeshName = jetpack_base01
		equipBoneName = bn_jetpack01
		equipPos = (0,0.45,0)
		equipDir = (0,0,0)
		runSpeed = 0.8
	}

	MODULE
	{
		name = WBIPropStateHelper
	}
}
